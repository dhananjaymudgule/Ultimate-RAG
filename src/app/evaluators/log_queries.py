# src/app/evaluators/log_queries.py

import pandas as pd
import os
from datetime import datetime
from pathlib import Path
from src.app.utils.logger import logger
from src.app.core.config import settings

# Define DataFrame columns
COLUMNS = ["timestamp", "retriever", "generator", "question", "retrieved_context", "generated_answer"]

def log_query(retriever: str, generator: str, question: str, retrieved_context: str, generated_answer: str):
    """
    Logs query-related data (question, retrieved context, and generated answer) into a CSV file.

    Args:
        retriever (str): Name of the retriever used (e.g., FAISS, Pinecone).
        generator (str): Name of the generator used (e.g., GPT-4, Gemini).
        question (str): User's query.
        retrieved_context (str): Context retrieved from the vector database.
        generated_answer (str): The final answer generated by the LLM.
    """
    try:
        # Ensure the directory exists
        settings.RAG_RESULTS_CSV.parent.mkdir(parents=True, exist_ok=True)
        
        # Prepare new log entry
        new_entry = pd.DataFrame([{
            "timestamp": datetime.now().isoformat(sep=' ', timespec='seconds'),
            "retriever": retriever,
            "generator": generator,
            "question": question.strip(),  # Strip unnecessary spaces
            "retrieved_context": retrieved_context.strip(),
            "generated_answer": generated_answer.strip(),
        }])

        # Append new entry to CSV (creates file if missing)
        new_entry.to_csv(
            settings.RAG_RESULTS_CSV, 
            mode="a", 
            header=not settings.RAG_RESULTS_CSV.exists(), 
            index=False,
            encoding='utf-8'
        )
        
        logger.info("Successfully logged query.")
    except Exception as e:
        logger.error(f"Error logging query: {e}", exc_info=True)

# Example usage
if __name__ == "__main__":
    log_query(
        "FAISS", 
        "GPT-4o", 
        "What is LangChain?", 
        "LangChain is a framework for developing LLM-powered applications.", 
        "LangChain is a framework to build applications using LLMs efficiently."
    )
